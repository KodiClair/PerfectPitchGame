#include <Adafruit_CircuitPlayground.h>
#include <AsyncDelay.h>
#include <Wire.h>
#include <SPI.h>

#define CLICKTHRESHHOLD 123

const int leftButtonPin = 4;
const int rightButtonPin = 5;
const int switchPin = 7;

int introSequence[81][2] = {//'Select Mode(switch): left - hard, right - easy'
  {100,50},{100,50},{100,50},{0,450},
  {100,50},{0,450},
  {100,50},{400,50},{100,50},{100,50},{0,450},
  {100,50},{0,450},
  {400,50},{100,50},{400,50},{100,50},{0,450},
  {400,50},
  {0,1000},
  {400,50},{400,50},{0,450},
  {400,50},{400,50},{400,50},{0,450},
  {400,50},{100,50},{100,50},{0,450},
  {100,50},
  {0,1000}, {0,1000},
  {100,50},{400,50},{100,50},{100,50},{0,450},
  {100,50},{0,450},
  {100,50},{100,50},{400,50},{100,50},{0,450},
  {400,50},
  {0,1000},
  {100,50},{100,50},{100,50},{100,50},{0,450},
  {100,50},{400,50},{0,450},
  {100,50},{400,50},{100,50},{0,450},
  {400,50},{100,50},{100,50},
  {0,1000},
  {100,50},{400,50},{100,50},{0,450},
  {100,50},{100,50},{0,450},
  {400,50},{400,50},{100,50},{0,450},
  {100,50},{100,50},{100,50},{100,50},{0,450},
  {400,50}};

float midi[127];
const int A_four = 440; // Cfour = midi[60];

int c_major[8] = {60, 62, 64, 65, 67, 69, 71, 72}; //C4

int gameoverSequence[11][2] = {
  {71, 100},
  {77, 100},
  {77, 75},
  {77, 100},
  {76, 100},
  {74, 100},
  {72, 50},
  {64, 50},
  {55, 50},
  {64, 50},
  {60, 100}
};

int lossSequence[2][2] = {
  {53,100},
  {49,100}
};

int starting[4][2] = {
  {78, 100},
  {78, 100},
  {78, 100},
  {82, 150}
};

int successSequence[2][2] = {
  {71,100},
  {76,200}
};

int congratulationSequence[15][2] = {
  {69, 100},
  {70, 100},
  {72, 75},{72, 100},{72, 100},{72, 100},{72, 150},
  {77, 100},
  {76, 100},
  {74, 75},
  {72, 100},
  {70, 100},
  {69, 100},
  {67, 75},
  {65, 200}
};

int congratsSequence2[6][2] = {
  {66,50},{68,50},{70,50},{73,50},{75,50},{78,50}
};

int gameRange[21] = {60,62,64,65,67,69,71,72,74,76,77,79,81,83,84,86,88,89,91,93,95};

AsyncDelay delay_10s;
AsyncDelay delay_5s;

volatile int selectedNote;
volatile int selectedIndex;
volatile int stage = 0;
volatile int mode = 0;
volatile int inputCount = 0;
volatile int tapCount = 0;
volatile bool tapFlag = 0;
volatile bool switchFlag = 0;
volatile bool switchState;
volatile bool buttonFlag = 0;
volatile bool leftButton = 0;
volatile bool rightButton = 0;
volatile int lives;

///////////////////////////////////////////
void setup() {
  pinMode(leftButtonPin, INPUT_PULLUP);
  pinMode(rightButtonPin, INPUT_PULLUP);
  pinMode(switchPin, INPUT);

  Serial.begin(9600);
  CircuitPlayground.begin();

  randomSeed(analogRead(0)); // randomizes the seed for random
  generateMIDI(); // creates the midi list with the note values

  CircuitPlayground.setAccelRange(LIS3DH_RANGE_8_G);
  CircuitPlayground.setAccelTap(2, CLICKTHRESHHOLD);
  CircuitPlayground.setBrightness(10); // Change value inside set Brightness to increase or decrease LED brightness

  attachInterrupt(digitalPinToInterrupt(switchPin), slideInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(leftButtonPin), lButtonInterrupt, FALLING);
  attachInterrupt(digitalPinToInterrupt(rightButtonPin), rButtonInterrupt, FALLING);
  attachInterrupt(digitalPinToInterrupt(CPLAY_LIS3DH_INTERRUPT), tapTime, FALLING);
}

void loop() {
  switch (stage) { // increments through each stage to replicate a single linear system. Stage starts off at 0
    case 0:
      randomSeed(analogRead(0));
      intro();
      delay_5s.start(5000, AsyncDelay::MILLIS); // gives the user 5 seconds to make their decision
      delay(5000);
      switchState = digitalRead(switchPin);
      if (delay_5s.isExpired()) {
        if (switchState == 0) {
          mode = 0;
          lives = 3;
        } else if (switchState == 1) {
          mode = 1;
          lives = 1;
        }
        Serial.println(mode);
        stage = 2;
      }
      buttonFlag = 0;
      leftButton = 0;
      rightButton = 0; // sets all button values to 0 incase of skippage
      break;
    case 1: // potential case for additional start actions
      break;
    case 2: 
      startingLine();
      delay(5);
      gameStage(0,3,7,14,1); //diff 1 b 1 oct
      if (lives <= 0) {
        stage = 5;
        break;
      }
      delay(5);
      gameStage(3,6,0,21,1); //diff 1 b 3 oct
      if (lives <= 0) {
        stage = 5;
        break;
      }
      delay(5);
      gameStage(6,9,7,14,2); //diff 2 b 1 oct
      if (lives <= 0) {
        stage = 5;
        break;
      }
      delay(5);
      gameStage(9,10,0,21,3); // diff 3b 3 oct
      if (lives <= 0) {
        stage = 5;
        break;
      }
      stage++;
      break;
    case 3: // end actions(winning ceremony)
      delay(5);
      endSequence(); // calls the endSequence function that plays the winning 2D array
      stage++;
      break;
    default:
      break;
  }

}

////////////////////////////////////////// Morse Code
void morseCode(int on, int off) {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, 255, 255, 255);
  }
  delay(on);
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, 0, 0, 0);
  }
  delay(off);
}
////////////////////////////////////////// Interrupts

void slideInterrupt() {
  switchFlag = !switchFlag;
  delay(5);
  switchState = digitalRead(switchPin);
}

void lButtonInterrupt() {
  buttonFlag = 1;
  leftButton = 1;
}

void rButtonInterrupt() {
  buttonFlag = 1;
  rightButton = 1;
}

void tapTime(void) {
  Serial.println("Tap");
  tapFlag = 1;
  tapCount++;
}

////////////////////////////////////////// Functions

void generateMIDI() {
  for (int x = 0; x < 127; ++x) {
    midi[x] = (A_four / 32.0) * pow(2.0, ((x - 9.0) / 12.0));
    Serial.println(midi[x]);
  }
}

void intro() { 
  for (int i = 0; i < sizeof(introSequence)/sizeof(introSequence[0]); i++) {
    morseCode(introSequence[i][0],introSequence[i][1]);
    if (buttonFlag) {
      break;      
    }
  }
}

void gameOver() {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, 255, 0, 0);
  }
  for (int i = 0; i < sizeof(gameoverSequence)/sizeof(gameoverSequence[0]); i++) {
    CircuitPlayground.playTone(midi[gameoverSequence[i][0]], gameoverSequence[i][1]);
  }
  for (int i = 0; i < 5; i++) {
    CircuitPlayground.setPixelColor(i, 0, 0, 0);
    CircuitPlayground.setPixelColor(9-i, 0, 0, 0);
    delay(50);
  }
}

void startingLine() {
  for (int i = 0; i < 4; i++) {
    CircuitPlayground.playTone(midi[starting[i][0]],starting[i][1]);
    if (i <= 2) {
      for (int i = 0; i < 10; i++) {
        CircuitPlayground.setPixelColor(i, 0, 0, 255);
      }
      delay(75);
      for (int i = 0; i < 10; i++) {
        CircuitPlayground.setPixelColor(i, 0, 0, 0);
      }
    } else {
      for (int i = 0; i < 10; i++) {
        CircuitPlayground.setPixelColor(i, 0, 255, 0);
      }
      delay(100);
      for (int i = 0; i < 10; i++) {
        CircuitPlayground.setPixelColor(i, 0, 0, 0);
      }
    }
  }

  delay(1000);
}

void inputNote(int ledIndex, int range_min, int range_max, int repeat) { // Called in gameStage function below
  tapCount = 0;
  int randomArray[repeat];
  int selectedArray[repeat];
  int parts = 0;
  int randomRange;
  int randomVal;

  if (mode == 1) {
    delay_10s.start(10000, AsyncDelay::MILLIS);
  }

  for(int i = 0; i < repeat; i++) {
    randomRange = random(range_min, range_max);
    randomVal = gameRange[randomRange];
    CircuitPlayground.playTone(midi[randomVal], 150);
    randomArray[i] = randomVal;
    Serial.println(randomRange);
    Serial.println(randomVal);
    delay(100);
  }

  while(tapCount < repeat) {
    if (buttonFlag) {
      delay(5);
      if (leftButton && (rightButton == 0)) { 
        delay(5);
        inputCount--;
        leftButton = 0;
      } else if (rightButton && (leftButton)==0) {
        delay(5);
        inputCount++;
        rightButton = 0;
      } 

      if (inputCount < 0) { 
        inputCount = 6;
      } else if (inputCount > (6)) {
        inputCount = 0;
      }

      selectedIndex = inputCount + 7;
      selectedNote = gameRange[selectedIndex]; 

      CircuitPlayground.playTone(midi[selectedNote], 150);
      Serial.println("Button Flag: ");
      Serial.println(selectedIndex);
      Serial.println(selectedNote);
      buttonFlag = 0;
    }  

    delay(5);  
    if (tapFlag) {
      delay(5);
      Serial.println("Tap Flag: ");
      Serial.println(selectedIndex);
      Serial.println(selectedNote);
      selectedArray[tapCount-1] = selectedNote;
      CircuitPlayground.playTone(midi[60], 50);
      tapFlag = 0;
    } 

    if (mode == 1 && delay_10s.isExpired()) {
      delay(5);
      selectedArray[0] = 0;
      tapCount = repeat;
    }
  }

  //////////
  for (int i = 0; i < repeat; i++) {
    Serial.print(randomArray[i]);
    Serial.print(" | ");
  }

  Serial.println();
  for (int i = 0; i < repeat; i++) { 
    Serial.print(selectedArray[i]);
    Serial.print(" | ");
  }
  Serial.println();
  ///////////

  for (int i = 0; i < repeat; i++) {
    if ((selectedArray[i] + 12 == randomArray[i]) || (selectedArray[i] - 12 == randomArray[i]) || (selectedArray[i] == randomArray[i])) {
      parts++;
    }
  }

  if (parts == repeat) {
    CircuitPlayground.setPixelColor(ledIndex, 0, 255, 0);
    for (int i = 0; i < sizeof(successSequence)/sizeof(successSequence[0]); i++) {
      CircuitPlayground.playTone(midi[successSequence[i][0]],successSequence[i][1]);
    }
  } else {
    CircuitPlayground.setPixelColor(ledIndex, 255, 0, 0);
    for (int i = 0; i < sizeof(lossSequence)/sizeof(lossSequence[0]); i++) {
      CircuitPlayground.playTone(midi[lossSequence[i][0]],lossSequence[i][1]);
    }
    lives--;
  }
}

void gameStage(int trial_min, int trial_max, int range_min, int range_max, int repeat) {
  for (int ledIndex = trial_min; ledIndex < trial_max; ledIndex++) {
    inputNote(ledIndex, range_min, range_max, repeat); // embedded input note function
    delay(500);
    if (lives <= 0) {
      gameOver();
      stage = 4;
      break;
      delay(500);
    }
  }
}

void endSequence() {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, 255, 215, 0);
  }

  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < sizeof(congratsSequence2)/sizeof(congratsSequence2[0]); j++) {
      CircuitPlayground.playTone(midi[congratsSequence2[j][0]],congratsSequence2[j][1]);
    }
  }
  for (int i = 0; i < 5; i++) {
    CircuitPlayground.setPixelColor(i, 0, 0, 0);
    CircuitPlayground.setPixelColor(9-i, 0, 0, 0);
    delay(50);
  }

}
